From bd49accbeabfa88b042830d2c3ffca11125c0ebe Mon Sep 17 00:00:00 2001
From: hackeris <hackeris@qq.com>
Date: Wed, 16 Jul 2025 01:24:27 +0800
Subject: [PATCH 19/19] Refactor path relocation

---
 bsd-user/elfload.c   |  2 +-
 include/qemu/path.h  |  5 +---
 linux-user/elfload.c |  2 +-
 linux-user/execve.c  |  4 +--
 linux-user/syscall.c | 70 +++++++++++++++++++++-----------------------
 util/path.c          | 38 +++++-------------------
 6 files changed, 46 insertions(+), 75 deletions(-)

diff --git a/bsd-user/elfload.c b/bsd-user/elfload.c
index 8c99286..32378af 100644
--- a/bsd-user/elfload.c
+++ b/bsd-user/elfload.c
@@ -1271,7 +1271,7 @@ int load_elf_binary(struct linux_binprm * bprm, struct target_pt_regs * regs,
             }
 
 #if 0
-            printf("Using ELF interpreter %s\n", relocate_realpath(elf_interpreter));
+            printf("Using ELF interpreter %s\n", path(elf_interpreter));
 #endif
             if (retval >= 0) {
                 retval = open(path(elf_interpreter), O_RDONLY);
diff --git a/include/qemu/path.h b/include/qemu/path.h
index cfad2f6..d3e771c 100644
--- a/include/qemu/path.h
+++ b/include/qemu/path.h
@@ -2,10 +2,7 @@
 #define QEMU_PATH_H
 
 void init_paths(const char *prefix);
-char *relocate_path(const char *name, char* out);
-char *relocate_path_at(int dirfd, const char *name, char* out);
-char *relocate_realpath(const char *pathname, char* out);
-char *relocate_realpath_at(int dirfd, const char *pathname, char* out);
+char *relocate_path_at(int dirfd, const char *name, char *out, bool follow_symlink);
 char* resolve_with_path_env(const char* path_env, const char* name, char* out);
 char* resolve_abs_with_cwd(const char* path, char* out);
 
diff --git a/linux-user/elfload.c b/linux-user/elfload.c
index 8f3d1ab..9a54189 100644
--- a/linux-user/elfload.c
+++ b/linux-user/elfload.c
@@ -2601,7 +2601,7 @@ static void load_elf_interp(const char *filename, struct image_info *info,
     int fd, retval;
 
     char reloc[PATH_MAX];
-    fd = open(relocate_realpath(filename, reloc), O_RDONLY);
+    fd = open(relocate_path_at(AT_FDCWD, filename, reloc, true), O_RDONLY);
     if (fd < 0) {
         goto exit_perror;
     }
diff --git a/linux-user/execve.c b/linux-user/execve.c
index a311960..772eddb 100644
--- a/linux-user/execve.c
+++ b/linux-user/execve.c
@@ -64,12 +64,12 @@ const char *resolve_program_path(const char *p, const char **envp, char* out) {
         if (path_value != NULL) {
             char prog[PATH_MAX] = {0};
             if (resolve_with_path_env(path_value, p, prog)) {
-                return relocate_realpath(prog, out);
+                return relocate_path_at(AT_FDCWD, prog, out, true);
             }
         }
     }
 
-	return relocate_realpath(p, out);
+	return relocate_path_at(AT_FDCWD, p, out, true);
 }
 
 int size_of_vp(const char** vp) {
diff --git a/linux-user/syscall.c b/linux-user/syscall.c
index f7b6bb1..79aa9c7 100644
--- a/linux-user/syscall.c
+++ b/linux-user/syscall.c
@@ -6128,7 +6128,7 @@ int execve_shebang(const char *filepath, const char **argv, const char **envp) {
         return -1;
     }
 
-    relocate_realpath(user_path, program_abs);
+    relocate_path_at(AT_FDCWD, user_path, program_abs, true);
 
     const char* qemu = get_qemu_abs_path();
 
@@ -7244,7 +7244,7 @@ static abi_long do_name_to_handle_at(abi_long dirfd, abi_long pathname,
     fh->handle_bytes = size;
 
     char reloc[PATH_MAX];
-    ret = get_errno(name_to_handle_at(dirfd, relocate_realpath_at(dirfd, name, reloc), fh, &mid, flags));
+    ret = get_errno(name_to_handle_at(dirfd, relocate_path_at(dirfd, name, reloc, true), fh, &mid, flags));
     unlock_user(name, pathname, 0);
 
     /* man name_to_handle_at(2):
@@ -7644,7 +7644,7 @@ static int do_openat(void *cpu_env, int dirfd, const char *pathname, int flags,
     }
 
     char reloc[PATH_MAX];
-    int fd = safe_openat(dirfd, relocate_realpath_at(dirfd, pathname, reloc), flags, mode);
+    int fd = safe_openat(dirfd, relocate_path_at(dirfd, pathname, reloc, true), flags, mode);
     return fd;
 }
 
@@ -7946,7 +7946,7 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
             if (!(p = lock_user_string(arg1)))
                 return -TARGET_EFAULT;
             char reloc[PATH_MAX];
-            ret = get_errno(unlink(relocate_path(p, reloc)));
+            ret = get_errno(unlink(relocate_path_at(AT_FDCWD, p, reloc, false)));
             unlock_user(p, arg1, 0);
             return ret;
         }
@@ -7957,7 +7957,7 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
             if (!(p = lock_user_string(arg2)))
                 return -TARGET_EFAULT;
             char reloc[PATH_MAX];
-            ret = get_errno(unlinkat(arg1, relocate_path_at(arg1, p, reloc), arg3));
+            ret = get_errno(unlinkat(arg1, relocate_path_at(arg1, p, reloc, false), arg3));
             unlock_user(p, arg2, 0);
             return ret;
         }
@@ -8064,7 +8064,7 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
             if (!(p = lock_user_string(arg1)))
                 return -TARGET_EFAULT;
             char reloc[PATH_MAX];
-            ret = get_errno(chdir(relocate_realpath(p, reloc)));
+            ret = get_errno(chdir(relocate_path_at(AT_FDCWD, p, reloc, true)));
             unlock_user(p, arg1, 0);
             return ret;
         }
@@ -8262,7 +8262,7 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
                 return -TARGET_EFAULT;
             }
             char reloc[PATH_MAX];
-            ret = get_errno(futimesat(arg1, relocate_realpath_at(arg1, p, reloc), tvp));
+            ret = get_errno(futimesat(arg1, relocate_path_at(arg1, p, reloc, true), tvp));
             unlock_user(p, arg2, 0);
         }
         return ret;
@@ -8274,7 +8274,7 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
                 return -TARGET_EFAULT;
             }
             char reloc[PATH_MAX];
-            ret = get_errno(access(relocate_realpath(p, reloc), arg2));
+            ret = get_errno(access(relocate_path_at(AT_FDCWD, p, reloc, true), arg2));
             unlock_user(p, arg1, 0);
             return ret;
         }
@@ -8286,7 +8286,7 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
                 return -TARGET_EFAULT;
             }
             char reloc[PATH_MAX];
-            ret = get_errno(faccessat(arg1, relocate_realpath_at(arg1, p, reloc), arg3, 0));
+            ret = get_errno(faccessat(arg1, relocate_path_at(arg1, p, reloc, true), arg3, 0));
             unlock_user(p, arg2, 0);
             return ret;
         }
@@ -8315,7 +8315,7 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
             else {
                 char reloc1[PATH_MAX];
                 char reloc2[PATH_MAX];
-                ret = get_errno(rename(relocate_path(p, reloc1), relocate_path(p2, reloc2)));
+                ret = get_errno(rename(relocate_path_at(AT_FDCWD, p, reloc1, false), relocate_path_at(AT_FDCWD, p2, reloc2, false)));
             }
             unlock_user(p2, arg2, 0);
             unlock_user(p, arg1, 0);
@@ -8333,7 +8333,7 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
             else {
                 char reloc1[PATH_MAX];
                 char reloc2[PATH_MAX];
-                ret = get_errno(renameat(arg1, relocate_path_at(arg1, p, reloc1), arg3, relocate_path_at(arg3, p2, reloc2)));
+                ret = get_errno(renameat(arg1, relocate_path_at(arg1, p, reloc1, false), arg3, relocate_path_at(arg3, p2, reloc2, false)));
             }
             unlock_user(p2, arg4, 0);
             unlock_user(p, arg2, 0);
@@ -8351,7 +8351,7 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
             } else {
                 char reloc1[PATH_MAX];
                 char reloc2[PATH_MAX];
-                ret = get_errno(sys_renameat2(arg1, relocate_path_at(arg1, p, reloc1), arg3, relocate_path_at(arg3, p2, reloc2), arg5));
+                ret = get_errno(sys_renameat2(arg1, relocate_path_at(arg1, p, reloc1, false), arg3, relocate_path_at(arg3, p2, reloc2, false), arg5));
             }
             unlock_user(p2, arg4, 0);
             unlock_user(p, arg2, 0);
@@ -8372,7 +8372,7 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
             if (!(p = lock_user_string(arg2)))
                 return -TARGET_EFAULT;
             char reloc[PATH_MAX];
-            ret = get_errno(mkdirat(arg1, relocate_path_at(arg1, p, reloc), arg3));
+            ret = get_errno(mkdirat(arg1, relocate_path_at(arg1, p, reloc, false), arg3));
             unlock_user(p, arg2, 0);
             return ret;
         }
@@ -8383,7 +8383,7 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
             if (!(p = lock_user_string(arg1)))
                 return -TARGET_EFAULT;
             char reloc[PATH_MAX];
-            ret = get_errno(rmdir(relocate_path(p, reloc)));
+            ret = get_errno(rmdir(relocate_path_at(AT_FDCWD, p, reloc, false)));
             unlock_user(p, arg1, 0);
             return ret;
         }
@@ -8429,7 +8429,7 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
                 return -TARGET_EFAULT;
             }
             char reloc[PATH_MAX];
-            ret = get_errno(acct(relocate_realpath(p, reloc)));
+            ret = get_errno(acct(relocate_path_at(AT_FDCWD, p, reloc, true)));
             unlock_user(p, arg1, 0);
         }
         return ret;
@@ -9167,7 +9167,7 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
                 ret = -TARGET_EFAULT;
             else {
                 char reloc[PATH_MAX];
-                ret = get_errno(symlink(p, relocate_path(p2, reloc)));
+                ret = get_errno(symlink(p, relocate_path_at(AT_FDCWD, p2, reloc, false)));
             }
             unlock_user(p2, arg2, 0);
             unlock_user(p, arg1, 0);
@@ -9184,7 +9184,7 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
                 ret = -TARGET_EFAULT;
             else {
                 char reloc[PATH_MAX];
-                ret = get_errno(symlinkat(p, arg2, relocate_path_at(arg2, p2, reloc)));
+                ret = get_errno(symlinkat(p, arg2, relocate_path_at(arg2, p2, reloc, false)));
             }
             unlock_user(p2, arg3, 0);
             unlock_user(p, arg1, 0);
@@ -9217,7 +9217,7 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
                 }
             } else {
                 char reloc[PATH_MAX];
-                ret = get_errno(readlink(relocate_path(p, reloc), p2, arg3));
+                ret = get_errno(readlink(relocate_path_at(AT_FDCWD, p, reloc, false), p2, arg3));
             }
             unlock_user(p2, arg2, ret);
             unlock_user(p, arg1, 0);
@@ -9239,7 +9239,7 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
                 snprintf((char *)p2, arg4, "%s", real);
             } else {
                 char reloc[PATH_MAX];
-                ret = get_errno(readlinkat(arg1, relocate_path_at(arg1, p, reloc), p2, arg4));
+                ret = get_errno(readlinkat(arg1, relocate_path_at(arg1, p, reloc, false), p2, arg4));
             }
             unlock_user(p2, arg3, ret);
             unlock_user(p, arg2, 0);
@@ -9356,7 +9356,7 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
             if (!(p = lock_user_string(arg1)))
                 return -TARGET_EFAULT;
             char reloc[PATH_MAX];
-            ret = get_errno(truncate(relocate_realpath(p, reloc), arg2));
+            ret = get_errno(truncate(relocate_path_at(AT_FDCWD, p, reloc, true), arg2));
             unlock_user(p, arg1, 0);
             return ret;
         }
@@ -9373,7 +9373,7 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
             if (!(p = lock_user_string(arg2)))
                 return -TARGET_EFAULT;
             char reloc[PATH_MAX];
-            ret = get_errno(fchmodat(arg1, relocate_realpath_at(arg1, p, reloc), arg3, 0));
+            ret = get_errno(fchmodat(arg1, relocate_path_at(arg1, p, reloc, true), arg3, 0));
             unlock_user(p, arg2, 0);
             return ret;
         }
@@ -9403,7 +9403,7 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
         }
         {
             char reloc[PATH_MAX];;
-            ret = get_errno(statfs(relocate_realpath(p, reloc), &stfs));
+            ret = get_errno(statfs(relocate_path_at(AT_FDCWD, p, reloc, true), &stfs));
         }
         unlock_user(p, arg1, 0);
     convert_statfs:
@@ -9445,7 +9445,7 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
         }
         {
             char reloc[PATH_MAX];
-            ret = get_errno(statfs(relocate_realpath(p, reloc), &stfs));
+            ret = get_errno(statfs(relocate_path_at(AT_FDCWD, p, reloc, true), &stfs));
             unlock_user(p, arg1, 0);
         }
     convert_statfs64:
@@ -9650,7 +9650,7 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
         }
         {
             char reloc[PATH_MAX];
-            ret = get_errno(stat(relocate_realpath(p, reloc), &st));
+            ret = get_errno(stat(relocate_path_at(AT_FDCWD, p, reloc, true), &st));
             unlock_user(p, arg1, 0);
         }
         goto do_stat;
@@ -9662,7 +9662,7 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
         }
         {
             char reloc[PATH_MAX];
-            ret = get_errno(lstat(relocate_path(p, reloc), &st));
+            ret = get_errno(lstat(relocate_path_at(AT_FDCWD, p, reloc, false), &st));
             unlock_user(p, arg1, 0);
         }
         goto do_stat;
@@ -10871,7 +10871,7 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
                 return -TARGET_EFAULT;
             }
             char reloc[PATH_MAX];
-            ret = get_errno(stat(relocate_realpath(p, reloc), &st));
+            ret = get_errno(stat(relocate_path_at(AT_FDCWD, p, reloc, true), &st));
             unlock_user(p, arg1, 0);
             if (!is_error(ret))
                 ret = host_to_target_stat64(cpu_env, arg2, &st);
@@ -10885,7 +10885,7 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
                 return -TARGET_EFAULT;
             }
             char reloc[PATH_MAX];
-            ret = get_errno(lstat(relocate_realpath(p, reloc), &st));
+            ret = get_errno(lstat(relocate_path_at(AT_FDCWD, p, reloc, true), &st));
             unlock_user(p, arg1, 0);
             if (!is_error(ret))
                 ret = host_to_target_stat64(cpu_env, arg2, &st);
@@ -10910,13 +10910,9 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
             if (!(p = lock_user_string(arg2))) {
                 return -TARGET_EFAULT;
             }
+            bool follow_symlink = arg4 & AT_SYMLINK_NOFOLLOW ? false : true;
             char reloc[PATH_MAX];
-            if (arg4 & AT_SYMLINK_NOFOLLOW) {
-                relocate_path_at(arg1, p, reloc);
-            } else {
-                relocate_realpath_at(arg1, p, reloc);
-            }
-            ret = get_errno(fstatat(arg1, reloc, &st, arg4));
+            ret = get_errno(fstatat(arg1, relocate_path_at(arg1, p, reloc, follow_symlink), &st, arg4));
             unlock_user(p, arg2, 0);
             if (!is_error(ret))
                 ret = host_to_target_stat64(cpu_env, arg3, &st);
@@ -10958,7 +10954,7 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
 #endif
             {
                 char reloc[PATH_MAX];
-                ret = get_errno(fstatat(dirfd, relocate_realpath_at(dirfd, p, reloc), &st, flags));
+                ret = get_errno(fstatat(dirfd, relocate_path_at(dirfd, p, reloc, true), &st, flags));
                 unlock_user(p, arg2, 0);
 
                 if (!is_error(ret)) {
@@ -11063,7 +11059,7 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
             if (!(p = lock_user_string(arg2)))
                 return -TARGET_EFAULT;
             char reloc[PATH_MAX];
-            ret = get_errno(fchownat(arg1, relocate_realpath_at(arg1, p, reloc), low2highuid(arg3),
+            ret = get_errno(fchownat(arg1, relocate_path_at(arg1, p, reloc, true), low2highuid(arg3),
                                      low2highgid(arg4), arg5));
             unlock_user(p, arg2, 0);
             return ret;
@@ -11948,7 +11944,7 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
                     return -TARGET_EFAULT;
                 }
                 char reloc[PATH_MAX];
-                ret = get_errno(sys_utimensat(arg1, relocate_realpath_at(arg1, p, reloc), tsp, arg4));
+                ret = get_errno(sys_utimensat(arg1, relocate_path_at(arg1, p, reloc, true), tsp, arg4));
                 unlock_user(p, arg2, 0);
             }
         }
@@ -11986,7 +11982,7 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
         {
             p = lock_user_string(arg2);
             char reloc[PATH_MAX];
-            ret = get_errno(sys_inotify_add_watch(arg1, relocate_realpath_at(arg1, p, reloc), arg3));
+            ret = get_errno(sys_inotify_add_watch(arg1, relocate_path_at(arg1, p, reloc, true), arg3));
             unlock_user(p, arg2, 0);
             return ret;
         }
diff --git a/util/path.c b/util/path.c
index 9f2b7f2..7123f59 100644
--- a/util/path.c
+++ b/util/path.c
@@ -162,40 +162,18 @@ static const char *get_linkat(int dirfd, const char *name, char* out) {
     return strcpy(out, abspath);
 }
 
-char *relocate_path_at(int dirfd, const char *name, char* out) {
-
-    const int keep_relative_path = dirfd == AT_FDCWD ? false : true;
-
-    do_relocate_path(name, keep_relative_path, out);
-
-    return out;
-}
-
-char *relocate_path(const char *name, char* out) {
-
-    do_relocate_path(name, false, out);
-
-    return out;
-}
-
-char *relocate_realpath_at(int dirfd, const char *name, char* out) {
+char *relocate_path_at(int dirfd, const char *name, char *out, bool follow_symlink) {
 
     const int keep_relative_path = dirfd == AT_FDCWD ? false : true;
 
     char tmp[PATH_MAX];
     do_relocate_path(name, keep_relative_path, tmp);
 
-    get_linkat(dirfd, tmp, out);
-
-    return out;
-}
-
-char *relocate_realpath(const char *name, char* out) {
-
-    char tmp[PATH_MAX];
-    do_relocate_path(name, false, tmp);
-
-    get_linkat(AT_FDCWD, tmp, out);
+    if (follow_symlink) {
+        get_linkat(dirfd, tmp, out);
+    } else {
+        strcpy(out, tmp);
+    }
 
     return out;
 }
@@ -209,7 +187,7 @@ char *resolve_with_path_env(const char *path_env, const char *name, char *out) {
 
     if (name[0] == '/') {
         char reloc[PATH_MAX];
-        const int r = access(relocate_realpath(name, reloc), F_OK);
+        const int r = access(relocate_path_at(AT_FDCWD, name, reloc, true), F_OK);
         if (r == 0) {
             strncpy(out, name, PATH_MAX);
             return out;
@@ -228,7 +206,7 @@ char *resolve_with_path_env(const char *path_env, const char *name, char *out) {
         snprintf(full_path, sizeof(full_path), "%s/%s", dir, name);
 
         char reloc[PATH_MAX];
-        const int r = access(relocate_realpath(full_path, reloc), F_OK);
+        const int r = access(relocate_path_at(AT_FDCWD, full_path, reloc, true), F_OK);
         if (r == 0) {
             strncpy(out, full_path, PATH_MAX);
             ret = out;
-- 
2.49.0.windows.1

