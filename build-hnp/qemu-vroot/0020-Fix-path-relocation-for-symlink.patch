From d83b3c4c7451e721ec1b0a355a738e4f46d4f114 Mon Sep 17 00:00:00 2001
From: hackeris <hackeris@qq.com>
Date: Thu, 17 Jul 2025 01:36:59 +0800
Subject: [PATCH 20/21] Fix path relocation for symlink

---
 util/path.c | 279 ++++++++++++++++++++++++++++++++++++++--------------
 1 file changed, 207 insertions(+), 72 deletions(-)

diff --git a/util/path.c b/util/path.c
index 7123f59..b67209f 100644
--- a/util/path.c
+++ b/util/path.c
@@ -10,6 +10,8 @@
 #include "qemu/path.h"
 #include "qemu/thread.h"
 
+#define SYMLOOP_MAX 40
+
 static const char *base;
 static GHashTable *hash;
 static QemuMutex strtok_lock;
@@ -43,20 +45,20 @@ static bool skip_relocation(const char *name) {
            || strcmp(name, "/proc") == 0;
 }
 
-const char *do_relocate_path(const char *name, bool keep_relative_path, char* out)
+const char *do_relocate_path(const char *name, char *out)
 {
     if (!base || !name) {
         //  invalid
         goto use_original;
     }
-    if (keep_relative_path && name[0] != '/') {
-        //  keep relative
-        goto use_original;
-    }
     if (skip_relocation(name)) {
         //  reuse hosts
         goto use_original;
     }
+    if (strstr(name, base) == name) {
+        //  already at rootfs
+        goto use_original;
+    }
 
     char abspath[PATH_MAX];
     if (name[0] != '/') {
@@ -66,16 +68,12 @@ const char *do_relocate_path(const char *name, bool keep_relative_path, char* ou
         strcat(abspath, name);
     } else {
         //  absolute
-        strcpy(abspath, name);
-    }
-    if (strstr(abspath, base) == &abspath[0]) {
-        //  already at rootfs
-        goto use_original;
+        strcpy(abspath, base);
+        strcat(abspath, "/");
+        strcat(abspath, name);
     }
 
-    strcpy(out, base);
-    strcat(out, "/");
-    strcat(out, abspath);
+    strcpy(out, abspath);
     return out;
 
 use_original:
@@ -85,12 +83,8 @@ use_original:
 
 static bool convert_to_abs_path(int dirfd, const char *path, char* out) {
 
-    if (path[0] == '/') {
-        strcpy(out, path);
-        return true;
-    }
-    if (dirfd == AT_FDCWD) {
-        do_relocate_path(path, false, out);
+    if (dirfd == AT_FDCWD || path[0] == '/') {
+        do_relocate_path(path, out);
         return true;
     }
 
@@ -105,72 +99,213 @@ static bool convert_to_abs_path(int dirfd, const char *path, char* out) {
 
     char full_path[PATH_MAX];
     snprintf(full_path, sizeof(full_path), "%s/%s", dir_path, path);
-    do_relocate_path(full_path, false, out);
+    do_relocate_path(full_path, out);
     return true;
 }
 
-static bool is_link(const char* hostpath) {
-
-    struct stat s;
-    if (lstat(hostpath, &s) < 0) {
-        return false;
-    }
 
-    return S_ISLNK(s.st_mode);
+static size_t slash_len(const char *s)
+{
+	const char *s0 = s;
+	while (*s == '/') s++;
+	return s-s0;
 }
 
-static const char *get_linkat(int dirfd, const char *name, char* out) {
-
-    if (skip_relocation(name)) {
-        return strcpy(out, name);
-    }
-
-    char abspath[PATH_MAX];
-
-    if (!convert_to_abs_path(dirfd, name, abspath)) {
-        return strcpy(out, name);
-    }
-
-    while (is_link(abspath)) {
-
-        char tmp[PATH_MAX];
-        ssize_t l = readlink(abspath, tmp, sizeof(tmp));
-        if (l < 0) {
-            return do_relocate_path(abspath, false, out);
-        }
-
-        tmp[l] = '\0';
-        if (tmp[0] == '/') {
-            strcpy(abspath, tmp);
-        } else {
-            size_t i = strlen(abspath);
-            while (abspath[--i] != '/') {}
-            abspath[i + 1] = '\0';
+char *__strchrnul(const char *s, int c)
+{
+	c = (unsigned char)c;
+	if (!c) return (char *)s + strlen(s);
 
-            strcat(abspath, "/");
-            strcat(abspath, tmp);
+	for (; *s && *(unsigned char *)s != c; s++);
+	return (char *)s;
+}
 
-            char real[PATH_MAX];
-            realpath(abspath, real);
-            strcpy(abspath, real);
-        }
+ssize_t readlink_with_relocation(char *path, char *buf, size_t len) {
+
+	char tmp[PATH_MAX];
+	ssize_t ret = readlink(path, tmp, PATH_MAX - 1);
+	if (ret < 0) {
+		return ret;
+	}
+	tmp[ret] = '\0';
+	if (tmp[0] != '/') {
+		strncpy(buf, tmp, len);
+	} else {
+		char abs[PATH_MAX];
+		do_relocate_path(tmp, abs);
+		strncpy(buf, abs, len);
+	}
+	return strlen(buf);
+}
 
-        do_relocate_path(abspath, false, tmp);
-        strcpy(abspath, tmp);
-    }
+/**
+ * copy and modify from realpath of musl
+ */
+char *readpath_with_relocation(const char *restrict filename, char *restrict resolved)
+{
+	char stack[PATH_MAX+1];
+	char output[PATH_MAX];
+	size_t p, q, l, l0, cnt=0, nup=0;
+	int check_dir=0;
+
+	if (!filename) {
+		errno = EINVAL;
+		return 0;
+	}
+	l = strnlen(filename, sizeof stack);
+	if (!l) {
+		errno = ENOENT;
+		return 0;
+	}
+	if (l >= PATH_MAX) goto toolong;
+	p = sizeof stack - l - 1;
+	q = 0;
+	memcpy(stack+p, filename, l+1);
+
+	/* Main loop. Each iteration pops the next part from stack of
+	 * remaining path components and consumes any slashes that follow.
+	 * If not a link, it's moved to output; if a link, contents are
+	 * pushed to the stack. */
+restart:
+	for (; ; p+=slash_len(stack+p)) {
+		/* If stack starts with /, the whole component is / or //
+		 * and the output state must be reset. */
+		if (stack[p] == '/') {
+			check_dir=0;
+			nup=0;
+			q=0;
+			output[q++] = '/';
+			p++;
+			/* Initial // is special. */
+			if (stack[p] == '/' && stack[p+1] != '/')
+				output[q++] = '/';
+			continue;
+		}
+
+		char *z = __strchrnul(stack+p, '/');
+		l0 = l = z-(stack+p);
+
+		if (!l && !check_dir) break;
+
+		/* Skip any . component but preserve check_dir status. */
+		if (l==1 && stack[p]=='.') {
+			p += l;
+			continue;
+		}
+
+		/* Copy next component onto output at least temporarily, to
+		 * call readlink, but wait to advance output position until
+		 * determining it's not a link. */
+		if (q && output[q-1] != '/') {
+			if (!p) goto toolong;
+			stack[--p] = '/';
+			l++;
+		}
+		if (q+l >= PATH_MAX) goto toolong;
+		memcpy(output+q, stack+p, l);
+		output[q+l] = 0;
+		p += l;
+
+		int up = 0;
+		if (l0==2 && stack[p-2]=='.' && stack[p-1]=='.') {
+			up = 1;
+			/* Any non-.. path components we could cancel start
+			 * after nup repetitions of the 3-byte string "../";
+			 * if there are none, accumulate .. components to
+			 * later apply to cwd, if needed. */
+			if (q <= 3*nup) {
+				nup++;
+				q += l;
+				continue;
+			}
+			/* When previous components are already known to be
+			 * directories, processing .. can skip readlink. */
+			if (!check_dir) goto skip_readlink;
+		}
+		ssize_t k = readlink_with_relocation(output, stack, p);
+
+		if (k==p) goto toolong;
+		if (!k) {
+			errno = ENOENT;
+			return 0;
+		}
+		if (k<0) {
+			if (errno != EINVAL) return 0;
+skip_readlink:
+			check_dir = 0;
+			if (up) {
+				while(q && output[q-1]!='/') q--;
+				if (q>1 && (q>2 || output[0]!='/')) q--;
+				continue;
+			}
+			if (l0) q += l;
+			check_dir = stack[p];
+			continue;
+		}
+		if (++cnt == SYMLOOP_MAX) {
+			errno = ELOOP;
+			return 0;
+		}
+
+		/* If link contents end in /, strip any slashes already on
+		 * stack to avoid /->// or //->/// or spurious toolong. */
+		if (stack[k-1]=='/') while (stack[p]=='/') p++;
+		p -= k;
+		memmove(stack+p, stack, k);
+
+		/* Skip the stack advancement in case we have a new
+		 * absolute base path. */
+		goto restart;
+	}
+
+ 	output[q] = 0;
+
+	if (output[0] != '/') {
+		if (!getcwd(stack, sizeof stack)) return 0;
+		l = strlen(stack);
+		/* Cancel any initial .. components. */
+		p = 0;
+		while (nup--) {
+			while(l>1 && stack[l-1]!='/') l--;
+			if (l>1) l--;
+			p += 2;
+			if (p<q) p++;
+		}
+		if (q-p && stack[l-1]!='/') stack[l++] = '/';
+		if (l + (q-p) + 1 >= PATH_MAX) goto toolong;
+		memmove(output + l, output + p, q - p + 1);
+		memcpy(output, stack, l);
+		q = l + q-p;
+	}
+
+	if (resolved) return memcpy(resolved, output, q+1);
+	else return strdup(output);
+
+toolong:
+	errno = ENAMETOOLONG;
+	return 0;
+}
 
-    return strcpy(out, abspath);
+static bool real_exists(const char *path) {
+	struct stat s;
+	if (lstat(path, &s) < 0) {
+		return false;
+	}
+	return !S_ISLNK(s.st_mode);
 }
 
 char *relocate_path_at(int dirfd, const char *name, char *out, bool follow_symlink) {
 
-    const int keep_relative_path = dirfd == AT_FDCWD ? false : true;
-
     char tmp[PATH_MAX];
-    do_relocate_path(name, keep_relative_path, tmp);
-
-    if (follow_symlink) {
-        get_linkat(dirfd, tmp, out);
+    convert_to_abs_path(dirfd, name, tmp);
+
+    if (follow_symlink
+    	&& !skip_relocation(name)
+    	&& !real_exists(tmp)) {
+	    char *res = readpath_with_relocation(tmp, out);
+	    if (!res) {
+		    strcpy(out, tmp);
+	    }
     } else {
         strcpy(out, tmp);
     }
@@ -222,7 +357,7 @@ char *resolve_with_path_env(const char *path_env, const char *name, char *out) {
     return ret;
 }
 
-char* resolve_abs_with_cwd(const char* path, char* out) {
+char* resolve_abs_with_cwd(const char *path, char *out) {
     if (path[0] != '/') {
         char *cwd = g_get_current_dir();
         char *abs_base = g_build_filename(cwd, path, NULL);
@@ -234,4 +369,4 @@ char* resolve_abs_with_cwd(const char* path, char* out) {
         strcpy(out, path);
         return out;
     }
-}
\ No newline at end of file
+}
-- 
2.49.0.windows.1

