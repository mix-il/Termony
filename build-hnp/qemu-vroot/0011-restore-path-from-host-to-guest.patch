From 5e96a0b87e3c63d79f205220bde7bebe637fb910 Mon Sep 17 00:00:00 2001
From: hackeris <hackeris@qq.com>
Date: Sat, 23 Aug 2025 09:30:13 +0800
Subject: [PATCH 11/11] restore path from host to guest

---
 linux-user/syscall.c | 20 ++++++++++++++++++++
 1 file changed, 20 insertions(+)

diff --git a/linux-user/syscall.c b/linux-user/syscall.c
index d3ae503d758..5d32a02030b 100644
--- a/linux-user/syscall.c
+++ b/linux-user/syscall.c
@@ -8626,6 +8626,16 @@ ssize_t do_guest_readlink(const char *pathname, char *buf, size_t bufsiz)
     } else {
         char reloc[PATH_MAX];
         ret = get_errno(readlink(relocate_path_at(AT_FDCWD, pathname, reloc, false), buf, bufsiz));
+        if (ret > 0) {
+            char tmp[PATH_MAX];
+            memcpy(tmp, buf, ret);
+            tmp[ret] = '\0';
+
+            restore_path(tmp, reloc);
+
+            snprintf(buf, bufsiz, "%s", reloc);
+            ret = MIN(strlen(reloc), bufsiz);
+        }
     }
 
     return ret;
@@ -10812,6 +10822,16 @@ static abi_long do_syscall1(CPUArchState *cpu_env, int num, abi_long arg1,
                 memcpy(p2, user, ret);
             } else {
                 ret = get_errno(readlinkat(arg1, relocate_path_at(arg1, p, reloc, false), p2, arg4));
+                if (ret > 0) {
+                    char tmp[PATH_MAX];
+                    memcpy(tmp, p2, ret);
+                    tmp[ret] = '\0';
+
+                    restore_path(tmp, reloc);
+
+                    snprintf(p2, arg4, "%s", reloc);
+                    ret = MIN(strlen(reloc), arg4);
+                }
             }
             unlock_user(p2, arg3, ret);
             unlock_user(p, arg2, 0);
-- 
2.43.0

