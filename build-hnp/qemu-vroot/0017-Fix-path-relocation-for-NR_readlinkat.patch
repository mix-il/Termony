From 6314677cb3b9cafb22ac06c8053de7d65d13310d Mon Sep 17 00:00:00 2001
From: hackeris <hackeris@qq.com>
Date: Tue, 15 Jul 2025 10:10:18 +0800
Subject: [PATCH 17/19] Fix path relocation for NR_readlinkat

---
 linux-user/syscall.c | 24 ++++++++++++++++++++++--
 util/path.c          | 13 ++++++++-----
 2 files changed, 30 insertions(+), 7 deletions(-)

diff --git a/linux-user/syscall.c b/linux-user/syscall.c
index ebd9511..95a7dc9 100644
--- a/linux-user/syscall.c
+++ b/linux-user/syscall.c
@@ -9214,7 +9214,17 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
                 }
             } else {
                 char reloc[PATH_MAX];
-                ret = get_errno(readlink(relocate_realpath(p, reloc), p2, arg3));
+                relocate_real(p, reloc);
+
+                char out[PATH_MAX];
+                ret = get_errno(readlink(reloc, out, PATH_MAX - 1));
+                if (ret < 0) {
+                    return ret;
+                }
+                out[ret] = 0;
+
+                ret = ret < arg3 ? ret : arg3;
+                memcpy(p2, out, ret);
             }
             unlock_user(p2, arg2, ret);
             unlock_user(p, arg1, 0);
@@ -9236,7 +9246,17 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
                 snprintf((char *)p2, arg4, "%s", real);
             } else {
                 char reloc[PATH_MAX];
-                ret = get_errno(readlinkat(arg1, relocate_realpath_at(arg1, p, reloc), p2, arg4));
+                relocate_path_at(arg1, p, reloc);
+
+                char out[PATH_MAX];
+                ret = get_errno(readlinkat(arg1, reloc, out, PATH_MAX - 1));
+                if (ret < 0) {
+                    return ret;
+                }
+                out[ret] = 0;
+
+                ret = ret < arg4 ? ret : arg4;
+                memcpy(p2, out, ret);
             }
             unlock_user(p2, arg3, ret);
             unlock_user(p, arg2, 0);
diff --git a/util/path.c b/util/path.c
index 4821c60..29d6217 100644
--- a/util/path.c
+++ b/util/path.c
@@ -88,18 +88,21 @@ static bool convert_to_abs_path(int dirfd, const char *path, char* out) {
         strcpy(out, path);
         return true;
     }
+    if (dirfd == AT_FDCWD) {
+        do_relocate_path(path, false, out);
+        return true;
+    }
 
     char dir_path[PATH_MAX] = {0};
-    char full_path[PATH_MAX];
-
-    snprintf(full_path, sizeof(full_path), "/proc/self/fd/%d", dirfd);
-    ssize_t len = readlink(full_path, dir_path, sizeof(dir_path) - 1);
+    char tmp[PATH_MAX];
+    snprintf(tmp, sizeof(tmp), "/proc/self/fd/%d", dirfd);
+    ssize_t len = readlink(tmp, dir_path, sizeof(dir_path) - 1);
     if (len <= 0) {
         return false;
     }
-
     dir_path[len] = '\0';
 
+    char full_path[PATH_MAX];
     snprintf(full_path, sizeof(full_path), "%s/%s", dir_path, path);
     do_relocate_path(full_path, false, out);
     return true;
-- 
2.49.0.windows.1

